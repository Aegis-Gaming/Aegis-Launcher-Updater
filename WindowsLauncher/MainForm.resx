<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEAGACoDAAAJgAAABAQAAABACAAaAQAAM4MAAAoAAAAIAAAAEAAAAABABgAAAAAAAAM
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3
        AFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3AFR3AAAAAAAAAAAAAAAAAAAAAAAA
        AAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUH
        AAUHAAUHAAUHAAUHAAUHAAUHAAUHAAUHAAAAAAAAAAAAAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcK
        AAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcKAAcK
        AAcKAAAAAAAAAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgM
        AAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAgMAAAAAIW+AAkOAAkOAAkOAAkOAAkO
        AAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkOAAkO
        AAkOAAkOAAkOAAkOAAkOAIW+AIS9AAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQ
        AAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAAsQAIS9AIS8UdKw
        YMSgXdSUUNCCUcyDUceDSKRhAA0TAA0TAA0TUcusVNmrWtKiUdmAYNV/UtJ7KmdGAA0TTtWzStqzScu1
        UcOtVNiXYcubVMeVVNmgQbOPAA0TVtScWNt6AIS8AIS8R62HSMupU8WXVMWDX8p8TaNrAA4VAA4VAA4V
        AA4VAA4VAA4VTcyjT8uUJWtPAA4VAA4VTdSyW9OeTtOaXcijUdiTTsSIYNWGYcuISsZ+YciNXcuHWc6U
        XcyKAIS8AIS8ABEYRpmGTrqfW8qQVdGDUs58Q6FoABEYABEYABEYABEYABEYS76uYMSHJ3VNABEYSdGp
        UNqkYNagXMeXJmtSABEYABEYABEYQa5qX9p5W852TtF9XtCGXNFxAIS8AIO7ABMbRKeIVMCgSsSLWcp6
        XMZ/Q6VmABMbABMbABMbABMbVc6tVsSrVsZ9MHJPABMbWc2eYMySTdKNI2BEABMbABMbABMbABMbABMb
        ABMbTK91Xsl1WcV2Sc5zAIO7AIS8ABUeABUeJmVbPZyBXcWFXdZ8QaFkABUeABUeABUeABUeWMGUStKO
        LYNZABUeABUeS8edXNeaKWFKABUeABUeABUeABUeABUeABUeABUeABUeUshtW8V/SdN4AIS8AIS8ABgi
        ABgiLXJtR7WLU8iQUdSFPK9nABgiABgiABgiABgiQJV2QZ91AhwlABgiABgiUbCNYdeOJF5AABgiABgi
        ABgiABgiWdCdGl1GABgiABgiABgiUL1vUsl9AIS8AIS8ABolABolOZd0V7yZXdOVV82KXNCNW8SKWMx+
        Wc94Wdp1UMVyM4pUABolABolTNatXduSXtp/JV9CABolABolABolSNecUMqMTMV2VsN6V9V6BSQqULt4
        StuAAIS8AIS9AB0pAB0pSKqRTciqUcyaUceRUrqLNJp5V9aXWdaFUs19VNl8NYdXAB0pAB0pTcihX9aZ
        VcqFHmRMAB0pAB0pAB0pUtSZYcuSVMd9VNmAS8xyWtd+V9d8WNtvAIS9AIW+AB8sAB8sRaiOU8KoX8qa
        X8WSUMeTWsSRAB8sAB8sKG1ROa5vAB8sAB8sAB8sUbiSX86ATtaDI2NGAB8sAB8sAB8sAB8sU7yDYcuH
        SsZ2Ych7XctvWc6DAyQuAIW+AIa+ACIwACIwSK6YW8muVdGnUs6OVcicT7qWACIwKHdpXdeAN5NiACIw
        ACIwACIwSb2RStOKUNp3JWZNACIwACIwACIwACIwACIwACIwACIwACIwACIwACIwACIwAIa+AIa/ACU1
        ACU1ACU1O6WNTrWYXMaRVs2TVcWYACU1NodqT8iJNY5iACU1ACU1ACU1VcGlWtCDYMxuHWdRACU1ACU1
        ACU1ACU1ACU1ACU1ACU1ACU1ACU1ACU1ACU1AIa/AIfAACg6ACg6ACg6SLmbWLynXdaSU8iKUL+UACg6
        K350SsOBOo5bACg6ACg6ACg6T76bT9CMXNeFJWRTACg6ACg6ACg6ACg6ACg6ACg6ACg6ACg6ACg6ACg6
        ACg6AIfAAIjCACs+ACs+ACs+SbyTUcWyUdSiS9aAS6l5I29oVcuGN5toACs+ACs+ACs+ACs+ACs+TKqI
        YdeJJGlRACs+ACs+ACs+ACs+ACs+ACs+ACs+ACs+ACs+ACs+ACs+AIjCAInEAC5CAC5CAC5CAC5CSK2Z
        Rq6cXNCKW8R+WMx4Wc92Op5jAC5CAC5CAC5CAC5CAC5CU8mYXtqJYc9yGmhSAC5CAC5CAC5CAC5CAC5C
        AC5CAC5CAC5CAC5CAC5CAInEAIvGADJIADJIADJIADJIQq+fSrupXM2IStBvV9aDWdaANZdrADJIADJI
        ADJIADJIADJIADJIQ6qQT9eIGm1dADJIADJIADJIADJIADJIADJISsmTHGVkADJIADJIAIvGAIzHADVM
        ADVMADVMADVMT7CbXcKsUMeOYM90XNhvV9iCOphsADVMADVMADVMADVMADVMADVMRsahW9N9TtNxHWNd
        ADVMADVMADVMADVMADVMX8WbG2FhADVMADVMAIzHAI7KADlRADlRADlRADlRADlRO6SSSbSfVMOAWs+G
        NJhyADlRADlRADlRADlRADlRADlRADlRADlRUr+VXMeOU9SAFmRaADlRADlRADlRADlRWMmJEFlfADlR
        ADlRAI7KAI/MAD1YAD1YAD1YAD1YAD1YSqueU8enW9CQWcZ+P55nAD1YAD1YAD1YAD1YAD1YAD1YAD1Y
        AD1YSsyoVtKSVtd9TMSAHm5mAD1YAD1YRb2SV8WJC01dAD1YAD1YAI/MAJHOAEFdAEFdAEFdAEFdAEFd
        TbyeUsamWM2fV9Z+Npx5AEFdAEFdAEFdAEFdAEFdAEFdAEFdAEFdAEFdXMmrSsyjV9KBYcl/XdGCU8Z/
        W891U8iDCE5fAEFdAEFdAJHOAJPRAEVjAEVjAEVjAEVjAEVjAEVjKpaIWMCfVNGUPKN5AEVjAEVjAEVj
        AEVjAEVjAEVjAEVjAEVjAEVjAEVjVceqWMiOV8eCXdiDSdtwT8x0Xtd5B1BmAEVjAEVjAJPRAJXUAEpp
        AEppAEppAEppAEppAEppK4mLWMGpWMyXQq17AEppAEppAEppAEppAEppAEppAEppAEppAEppAEppAEpp
        Q7iLSdl2UMpuTMVvVsN6V9V6CFZrAEppAEppAJXUAJfXAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1u
        AE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1uAE1u
        AE1uAJfXAAAAAFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1
        AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AFJ1AAAAAAAAAFZ7AFZ7AFZ7AFZ7AFZ7
        AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7AFZ7
        AFZ7AFZ7AFZ7AFZ7AFZ7AAAAAAAAAAAAAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpV
        AHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAHpVAAAAAAAAAAAAAAAA
        AAAAAAAAAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3WAN3W
        AN3WAN3WAN3WAN3WAN3WAN3WAAAAAAAAAAAAAAAA8AAAD8AAAAOAAAABgAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABwAAAA/AAAA8oAAAAEAAAACAAAAABACAAAAAAAAAE
        AAAAAAAAAAAAAAAAAAAAAAAAAFd8DAAlM4YALD77ACs8/wAqPP8AKjz/ACs8/wArPP8AKzz/ACs8/wAr
        PP8AKzz/ACs8/wAsPvsAJjWGAExsDAA/WoUAAAD/AAIF/AAAAf8AAgP/AAEB/wAAAP8AAAH/AAEC/wAD
        A/8AAAD/AAAA/wAAAf8AAwX8AQAA/wBBXYUDTGn5Bw8O/AMYGf8HGhn/AAoQ/wYaHf8KIiH/BxsY/wgb
        GP8BCw//Ahcd/wYZHP8FFxv/AREZ/wIFBvwDTWb5JJml/1S/kf9UyYL/NoJW/wAGDv8OLy//O5l8/0m3
        ef8aSzX/Opt//1LUq/9ItYn/WsuK/0y8hf9HoGz/MbCg/wRRbP9Dmn//XNaQ/0emZv8BEhv/AAIP/0Ge
        hv88jmT/Il5T/2HrrP8rbFL/ABIZ/w8zKf9Cn2P/aOSC/yyplv8AQmP/Fj46/1LEkP9MvHL/BiMl/wwu
        Lv9Ltob/CS8r/y94Y/9HpXL/AAQT/wckKv8VRz//AA0c/z2RVv8ttJ7/AEFl/yBWTP9a1ab/UsOK/0my
        ff9PxHX/O5lc/wIcKv9UzZf/QJ1m/wAIGv8mc1//Ze6c/07Dc/9Ls2X/LbOb/wBEaf8iXFf/Wc+p/1vS
        mv8ob2T/Ln5b/yRuUf8AGy//U82O/zqfY/8AGir/BSo0/ypvWP8vf1n/MHVN/wVadv8AUXX/BSs2/0u3
        m/9f3Jv/J25m/zubc/8fYU7/AB85/1LIj/89mWP/AB81/wEmNv8AGTD/ABgy/wAQKP8AUnf/AFl+/wAk
        NP83lYv/VdCX/0uzdv9BqG//BTVC/wAgOf8se2z/Ur99/wQzQP8AK0D/AjBC/wQ2Rv8DLDv/AFh+/wFg
        h/8AIzr/Imlz/1XFnP9d3Hj/RLBz/wAySv8AMUj/BDpR/03Hif8of1//ACpI/wAmQ/8ndW3/FlVW/wBV
        gf8AY4z/ADRL/wZGXP9LtZ3/W9CG/x9vYf8AM1L/Aj9W/wAvT/8pgnr/YeSR/yB0Yv8AOVb/Opt9/xBP
        Vv8AXIr/AGiU/wA+Wf8AQmD/NJaO/2Pgm/8heGv/ADle/wJFYf8AQ1//AURi/zulkv9j3Yv/WdV6/1rY
        ff8JS1z/AGWU/wBun/kASGj8AElt/wpWdP8uj4r/EWdz/wBIbf8BTW7/AE1u/wBJbP8ES2//I4l7/ymR
        cP8pi3b/BU5o/ABtn/kAdaGFAEtm/wBSb/wAT2z/AEVp/wBMbP8AUW3/AFBt/wBQbf8AUG3/AVBt/wBG
        a/8ARW3/AEdu/ABKZv8AdaGFAMC1DACkkYYAqJb7AaeV/wKqlf8BqJX/AKeV/wCnlf8Ap5X/AKeV/wCn
        lf8CqpX/AqqV/wKqlvsApJGGAL+1DIABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIABAAA=
</value>
  </data>
</root>